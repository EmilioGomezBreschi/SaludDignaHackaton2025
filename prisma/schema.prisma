// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  appointments Appointment[]
  results    Result[]
}

model Appointment {
  id        String   @id @default(uuid())
  date      DateTime
  status    AppointmentStatus @default(PENDING)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  studyId   String
  study     Study    @relation(fields: [studyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  result    Result?
}

model Study {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  duration    Int      // Duraci√≥n en minutos
  appointments Appointment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Result {
  id            String   @id @default(uuid())
  appointmentId String   @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  status        ResultStatus @default(PENDING)
  fileUrl       String?
  observations  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ResultStatus {
  PENDING
  COMPLETED
  CANCELLED
}
